{
  "hash": "bae8f051c015169f10a8b417cf012ac8",
  "result": {
    "engine": "knitr",
    "markdown": "# Introduction to Data Transfer \n\n<!-- \nThis chapter gives an overview of data transfer.\n-->\n\nIn previous chapters, we learned how to write our own simple R programs by directly creating data frames in RStudio with the `data.frame()` function, the `tibble()` function, and the `tribble()` function. We consider this to be a really fundamental skill to master because it allows us to simulate data and it allows us to get data into R regardless of what format that data is stored in (assuming we can “see” the stored data). In other words, if nothing else, we can always resort to creating data frames this way.\n\nIn practice, however, this is not how people generally exchange data. You might recall that in [Section 2.2.1 Transferring data](#transferring-data) We briefly mentioned the need to get data into R that others have stored in various different **file types**. These file types are also sometimes referred to as **file formats**. Common examples encountered in epidemiology include database files, spreadsheets, text files, SAS data sets, and Stata data sets.\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](competencies_transfer.png){width=900}\n:::\n:::\n\n\n\n\n\n\nFurther, the data frames we’ve created so far don’t currently live in our global environment from one programming session to the next. We haven’t yet learned how to efficiently store our data long-term. We think the limitations of having to manually create a data frame every time we start a new programming session are probably becoming obvious to you at this point.\n\nIn this part of the book, we will learn to **import** data stored in various different file types into R for data management and analysis, we will learn to store R data frames in a more permanent way so that we can come back later to modify or analyze them, and we will learn to **export** data so that we may efficiently share it with others.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}