{
  "hash": "95bdb087796365ff962d566e64e3b058",
  "result": {
    "engine": "knitr",
    "markdown": "# Navigating the RStudio Interface\n\nIf you followed along with the previous chapters, you have R and RStudio installed on your computer and you have some idea of what R and RStudio are. At this point, it can be common for people to open RStudio and get totally overwhelmed. _‚ÄúWhat am I looking at?‚Äù_ _‚ÄùWhat do I click first?‚Äù_ _‚ÄúWhere do I even start?‚Äù_ Don‚Äôt worry if these, or similar, thoughts have crossed your mind. You are in good company and we will start to clear some of them up in this chapter.\n\nWhen we load RStudio, we should see a screen that looks very similar to @fig-rstudio below. There, we see three **panes**, and each pane has multiple tabs.\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The default RStudio user interface.](rstudio.png){#fig-rstudio width=10.07in}\n:::\n:::\n\n\n\n\n\n\n## The console pane\n\nThe first pane we are going to talk about is the **console/terminal/background jobs** pane.\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The R Console.](console.png){#fig-console width=10.07in}\n:::\n:::\n\n\n\n\n\n\nIt‚Äôs called the \"console/terminal/background jobs\" pane because it has three tabs we can click on by default: \"console\", \"terminal\", and \"background jobs\". However, we will refer to this pane as the \"console pane\" and will mostly ignore the terminal and background jobs tabs for now. We aren‚Äôt ignoring them because they aren‚Äôt useful; instead, we are ignoring them because using them isn‚Äôt essential for anything we will discuss in this chapter, and we want to keep things as simple as possible for now.\n\nThe [console](../appendices/glossary.qmd#glossary-console) is the most basic way to interact with R. We can type a command to R into the console prompt (the prompt looks like ‚Äú>‚Äù) and R will respond to what we type. For example, below we typed ‚Äú1 + 1,‚Äù pressed the return/enter key, and the R console returned the sum of the numbers 1 and 1.\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Doing some addition in the R console.](one_plus_one.png){#fig-one-plus-one width=10.07in}\n:::\n:::\n\n\n\n\n\n\nThe number 1 we see in brackets before the 2 (i.e., [1]) is telling us that this line of results starts with the first result. That fact is obvious here because there is only one result. So, let's look at a result that spans multiple lines to make this idea clearer.\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Demonstrating a function that returns multiple results.](seq_function.png){#fig-seq-function width=10.07in}\n:::\n:::\n\n\n\n\n\n\nIn @fig-seq-function we see examples of a couple of new concepts that are worth discussing.\n\nFirst, as promised, we have more than one line of results (or output). The first line of results starts with a 1 in brackets (i.e., `[1]`), which indicates that this line of results starts with the first result. In this case, the first result is the number 2. The second line of results starts with a 33 in brackets (i.e., `[33]`), which indicates that this line of results starts with the thirty-third result. In this case, the thirty-third result is the number 66. If we count the numbers in the first line, there should be 32 -- results 1 through 32. We also want to make it clear that `[1]` and `[33]` are _NOT_ results themselves. They are just helping us count the number of results per line. \n\nThe second new thing that you may have noticed in @fig-seq-function is our use of a **function**. Functions are a **BIG DEAL** in R. So much so that R is called a _functional language_. We don‚Äôt really need to know all the details of what that means; however, we should know that, in general, everything we _do_ in R we will _do_ with a function. By contrast, everything we _create_ in R will be an _object_. If we wanted to make an analogy between the R language and the English language, we could think of functions as verbs -- they _do_ things -- and objects as nouns -- they _are_ things. This distinction likely seems abstract and confusing at the moment, but we will make it more concrete soon.\n\nMost functions in R begin with the function name followed by parentheses. For example, `seq()`, `sum()`, and `mean()`. \n\n_Question_: What is the name of the function we used in the example above? \n\n_Answer_: We used the `seq()` function ‚Äì short for sequence - in the example above. \n\nYou may notice that there are three pairs of words, equal symbols, and numbers that are separated by commas inside the `seq()` function. They are, `from = 2`, `to = 100`, and `by = 2`. The words `from`, `to`, and `by` are all [arguments](../appendices/glossary.qmd#glossary-arguments) to the `seq()` function. We will learn more about functions and arguments later. For now, just know that arguments _give functions the information they need to give us the result we want_. \n\nIn this case, the `seq()` function [returns](../appendices/glossary.qmd#glossary-returns) a sequence of numbers. But first, we had to give it information about where that sequence should start, where it should end, and how many steps should be in the middle. Above, the sequence began with the value we [passed](../appendices/glossary.qmd#glossary-pass) to the `from` argument (i.e., 2), it ended with the value we passed to the `to` argument (i.e., 100), and it increased at each step by the number we passed to the `by` argument (i.e., 2). So, 2, 4, 6, 8 ‚Ä¶ 100.\n\nWhether you realize it or not, we've covered some important programming terms while discussing the `seq()` function above. Before we move on to discussing RStudio's other panes, let‚Äôs quickly review and reinforce a few of terms we will use repeatedly in this book.\n\n* [Arguments](../appendices/glossary.qmd#glossary-arguments): Arguments always live _inside_ the parentheses of R functions and receive information the function needs to generate the result we want.\n\n* [Pass](../appendices/glossary.qmd#glossary-pass): In programming lingo, we _pass_ a value to a function argument. For example, in the function call `seq(from = 2, to = 100, by = 2)` we could say that we _passed_ a value of 2 to the `from` argument, we _passed_ a value of 100 to the `to` argument, and we _passed_ a value of 2 to the `by` argument.\n\n* [Return](../appendices/glossary.qmd#glossary-return): Instead of saying, ‚Äúthe `seq()` function _gives us_ a sequence of numbers‚Ä¶‚Äù we say, ‚Äúthe `seq()` function _returns_ a sequence of numbers‚Ä¶‚Äù In programming lingo, functions _return_ one or more results.\n\n::: callout-note\nüóí**Side Note:** The `seq()` function isn‚Äôt particularly important or noteworthy. We essentially chose it at random to illustrate some key points. However, arguments, passing values, and return values are extremely important concepts and we will return to them many times.\n:::\n\n## The environment pane\n\nThe second pane we are going to talk about is the environment/history/connections pane in @fig-environment-pane. However, we will mostly refer to it as the environment pane and we will mostly ignore the history and connections tab. We aren‚Äôt ignoring them because they aren‚Äôt useful; rather, we are ignoring them because using them isn‚Äôt essential for anything we will discuss anytime soon, and we want to keep things as simple as possible. \n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The environment pane](environment_pane.png){#fig-environment-pane width=10.07in}\n:::\n:::\n\n\n\n\n\n\nThe Environment pane shows you all the **objects** that R can currently use for data management or analysis. In this picture, @fig-environment-pane our environment is empty. Let‚Äôs create an object and add it to our environment.\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The vector x in the global environment.](environment_pane2.png){#fig-environment-pane2 width=10.07in}\n:::\n:::\n\n\n\n\n\n\nHere we see that we created a new object called `x`, which now appears in our **Global Environment**. @fig-environment-pane2 This gives us another great opportunity to discuss some new concepts. \n\nFirst, we created the `x` object in the console by _assigning_ the value 2 to the letter x. We did this by typing ‚Äúx‚Äù followed by a less than symbol (<), a dash symbol (-), and the number 2. R is kind of unique in this way. We have never seen another programming language (although I‚Äôm sure they are out there) that uses `<-` to assign values to variables. By the way, `<-` is called the assignment operator (or assignment arrow), and ‚Äùassign‚Äù here means ‚Äúmake x contain 2‚Äù or \"put 2 inside x.\" \n\nIn many other languages you would write that as `x = 2`. But, for whatever reason, in R it is `<-`. Unfortunately, `<-` is more awkward to type than `=`. Fortunately, RStudio gives us a keyboard shortcut to make it easier. To type the assignment operator in RStudio, just hold down Option + - (dash key) on a Mac or Alt + - (dash key) on a PC and RStudio will insert `<-` complete with spaces on either side of the arrow. This may still seem awkward at first, but you will get used to it.\n\n::: callout-note\nüóí**Side Note:** A note about using the letter \"x\": By convention, the letter \"x\" is a widely used variable name. You will see it used a lot in example documents and online. However, there is nothing special about the letter x. We could have just as easily used any other letter (`a <- 2`), word (`variable <- 2`), or descriptive name (`my_favorite_number <- 2`) that is allowed by R.\n:::\n\nSecond, you can see that our Global Environment now includes the object `x`, which has a value of 2. In this case, we would say that `x` is a **numeric vector** of length 1 (i.e., it has one value stored in it). We will talk more about vectors and vector types soon. For now, just notice that objects that you can manipulate or analyze in R will appear in your Global Environment.\n\n::: callout-warning\nR is a **case-sensitive** language. That means that uppercase x (X) and lowercase x (x) are different things to R. So, if we assign 2 to lower case x (`x <- 2`), and then later ask R to tell us what number we stored in uppercase X, we will get an error (`Error: object 'X' not found`).\n:::\n\n## The files pane\n\nNext, let‚Äôs talk about the Files/Plots/Packages/Help/Viewer pane (that‚Äôs a mouthful). @fig-files-pane \n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The Files/Plots/Packages/Help/Viewer pane.](files_pane.png){#fig-files-pane width=10.07in}\n:::\n:::\n\n\n\n\n\n\nAgain, some of these tabs are more applicable for us than others. For us, the **files** tab and the **help** tab will probably be the most useful. You can think of the files tab as a mini Finder window (for Mac) or a mini File Explorer window (for PC). The help tab is also extremely useful once you get acclimated to it.\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The help tab.](help.png){#fig-help width=10.07in}\n:::\n:::\n\n\n\n\n\n\nFor example, in the screenshot above @fig-help we typed the `seq` into the search bar. The help pane then shows us a page of documentation for the `seq()` function. The documentation includes a brief description of what the function does, outlines all the arguments the `seq()` function recognizes, and, if you scroll down, gives examples of using the `seq()` function. Admittedly, this help documentation can seem a little like reading Greek (assuming you don't speak Greek) at first. But, you will get more comfortable using it with practice. We hated the help documentation when we were learning R. Now, we use it _all the time_.\n\n## The source pane\n\nThere is actually a fourth pane available in RStudio. If you click on the icon shown below you will get the following dropdown box with a list of files you can create. @fig-source1\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Click the new source file icon.](source1.png){#fig-source1 width=10.07in}\n:::\n:::\n\n\n\n\n\n\nIf you click any of these options, a new pane will appear. We will arbitrarily pick the first option ‚Äì R Script. \n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![New source file options.](source2.png){#fig-source2 width=10.07in}\n:::\n:::\n\n\n\n\n\n\nWhen we do, a new pane appears. It's called the **source pane**. In this case, the source pane contains an untitled R Script. We won‚Äôt get into the details now because we don‚Äôt want to overwhelm you, but soon you will do the majority of your R programming in the source pane.\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![A blank R script in the source pane.](source3.png){#fig-source3 width=10.07in}\n:::\n:::\n\n\n\n\n\n\n## RStudio preferences\n\nFinally, We're going to recommend that you change a few settings in RStudio before we move on. Start by clicking `Tools`, and then `Global Options` in RStudio's menu bar, which probably runs horizontally across the top of your computer's screen.\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Select the preferences menu on Mac.](preferences1.png){#fig-preferences1 width=1.87in}\n:::\n:::\n\n\n\n\n\n\nIn the `General` tab, we recommend turning off the `Restore .Rdata into workspace at startup` option. We also recommend setting the `Save workspace .Rdata on exit` dropdown to `Never`. Finally, we recommend turning off the `Always save history (even when not saving .Rdata)` option.\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![General options tab.](preferences3.png){#fig-preferences3 width=10.07in}\n:::\n:::\n\n\n\n\n\n\nWe change our editor theme to Twilight in the `Appearance` tab. We aren't necessarily recommending that you change your theme ‚Äì this is entirely personal preference ‚Äì we're just letting you know why our screenshots will look different from here on out.\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Appearance tab.](preferences4.png){#fig-preferences4 width=5.25in}\n:::\n:::\n\n\n\n\n\n\nIt's likely that you still have lots of questions at this point. That's totally natural. However, we hope you now feel like you have some idea of what you are looking at when you open RStudio. Most of you will naturally get more comfortable with RStudio as we move through the book. For those of you who want more resources now, here are some suggestions.\n\n1. [RStudio IDE cheatsheet](https://rstudio.com/resources/cheatsheets/)\n\n2. [ModernDive: What are R and RStudio?](https://moderndive.com/1-getting-started.html#r-rstudio)\n",
    "supporting": [
      "navigating_rstudio_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}