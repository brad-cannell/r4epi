{
  "hash": "46ceffc6e619ab15596f49ac3212c968",
  "result": {
    "engine": "knitr",
    "markdown": "# Numerical Descriptions of Categorical Variables {#sec-numerical-descriptions-of-categorical-variables}\n\nWe’ll begin our discussion of descriptive statistics in the categorical half of our flow chart. Specifically, we’ll start by numerically describing categorical variables. As a reminder, categorical variables are variables whose values fit into categories.\n\n\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Numerical variable descriptive analysis flowchart.](flowchart_cat_numerical.png)\n:::\n:::\n\n\n\n\n\n\n\n\nSome examples of categorical variables commonly seen in public health data are: sex, race or ethnicity, and level of educational attainment.\n\n\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Examples of categorical variables.](categorical_variables_01.jpeg)\n:::\n:::\n\n\n\n\n\n\n\n\nNotice that there is no inherent numeric value to any of these categories. Having said that, we can, and often will, assign a numeric value to each category using R.\n\n\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Examples of categorical variables with assigned numeric values.](categorical_variables_02.jpeg)\n:::\n:::\n\n\n\n\n\n\n\n\nThe two most common numerical descriptions of categorical variables are probably the [frequency count](../appendices/glossary.qmd#glossary-frequency-count) (you will often hear this referred to as simply the [frequency](../appendices/glossary.qmd#glossary-frequency-count), the [count](../appendices/glossary.qmd#glossary-frequency-count), or the [n](../appendices/glossary.qmd#glossary-frequency-count)) and the [proportion](../appendices/glossary.qmd#glossary-proportion) or [percentage](../appendices/glossary.qmd#glossary-percentage) (the percentage is just the proportion multiplied by 100).\n\n\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Frequency and count - common numeric descriptions of categorical variables.](categorical_variables_03.jpeg)\n:::\n:::\n\n\n\n\n\n\n\n\nThe count is simply the number of observations, in this case people, which fall into each possible category.\n\nThe proportion is just the count divided by the total number of observations. In this example, 2 people out of 5 people (.40 or 40%) are in the Asian race category.\n\nThe remainder of this chapter is devoted to learning how to calculate frequency counts and percentages using R.\n\n## Factors\n\nWe first learned about factors in the [Let’s Get Programming](../lets_get_programming/lets_get_programming.qmd) chapter. Before moving on to calculating frequency counts and percentages, we will discuss factors in slightly greater depth here. As a reminder, factors can be useful for representing categorical data in R. To demonstrate, let's simulate a simple little data frame. \n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load dplyr for tibble()\nlibrary(dplyr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo <- tibble(\n  id  = c(\"001\", \"002\", \"003\", \"004\"),\n  age = c(30, 67, 52, 56),\n  edu = c(3, 1, 4, 2)\n)\n```\n:::\n\n\n\n\n\n\n\n\n👆 **Here's what we did above:**\n\n* We created a data frame that is meant to simulate some demographic information about 4 hypothetical study participants.\n\n* The first variable (`id`) is the participant's study id.\n\n* The second variable (`age`) is the participant's age at enrollment in the study.\n\n* The third variable (`edu`) is the highest level of formal education the participant completed. Where:\n\n  - 1 = Less than high school\n  \n  - 2 = High school graduate\n  \n  - 3 = Some college\n  \n  - 4 = College graduate\n\nEach participant in our data frame has a value for `edu` -- 1, 2, 3, or 4. The value they have for that variable corresponds to the highest level of formal education they have completed, which is split up into categories that we defined. We can see which category each person is in by viewing the data.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  id      age   edu\n  <chr> <dbl> <dbl>\n1 001      30     3\n2 002      67     1\n3 003      52     4\n4 004      56     2\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nWe can see that person `001` is in category `3`, person `002` is in category `1`, and so on. This compact representation of the categories is convenient for data entry and data manipulation, but it also has an obvious limitation -- what do these numbers mean? We defined what these values mean for you above, but if you didn't have that information, or some kind of prior knowledge about the process that was used to gather this data, then you would likely have no idea what these numbers mean. \n\nNow, we could have solved that problem by making education a character vector from the beginning. For example: \n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo <- tibble(\n  id       = c(\"001\", \"002\", \"003\", \"004\"),\n  age      = c(30, 67, 52, 56),\n  edu      = c(3, 1, 4, 2),\n  edu_char = c(\n    \"Some college\", \"Less than high school\", \"College graduate\", \n    \"High school graduate\"\n  )\n)\n\ndemo\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n  id      age   edu edu_char             \n  <chr> <dbl> <dbl> <chr>                \n1 001      30     3 Some college         \n2 002      67     1 Less than high school\n3 003      52     4 College graduate     \n4 004      56     2 High school graduate \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nBut, this strategy also has a few limitations. \n\n👎 First, entering data this way requires more typing. Not such a big deal in this case because we only have 4 participants. But, imagine typing out the categories as character strings 10, 20, or 100 times. 😫\n\n👎 Second, R summarizes character vectors alphabetically by default, which may not be the ideal way to order some categorical variables. \n\n👎 Third, creating categorical variables in our data frame as character vectors limits us to inputting only _observed_ values for that variable. However, there are cases when other categories are possible and just didn't apply to anyone in our data. That information may be useful to know.\n\nAt this point, we're going to show you how to coerce a variable to a factor in your data frame. Then, we will return to showing you how using factors can overcome some of the limitations outlined above.\n\n### Coerce a numeric variable\n\nThe code below shows one method for coercing a numeric vector into a factor.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load dplyr for pipes and mutate()\nlibrary(dplyr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo <- demo |> \n  mutate(\n    edu_f = factor(\n      x      = edu,\n      levels = 1:4,\n      labels = c(\n        \"Less than high school\", \"High school graduate\", \"Some college\", \n        \"College graduate\"\n      )\n    )\n  )\n\ndemo\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 5\n  id      age   edu edu_char              edu_f                \n  <chr> <dbl> <dbl> <chr>                 <fct>                \n1 001      30     3 Some college          Some college         \n2 002      67     1 Less than high school Less than high school\n3 003      52     4 College graduate      College graduate     \n4 004      56     2 High school graduate  High school graduate \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n👆**Here's what we did above:**\n\n* We used `dplyr`'s `mutate()` function to create a new variable (`edu_f`) in the data frame called `demo`. The purpose of the `mutate()` function is to add new variables to data frames. We will discuss `mutate()` in greater detail [later in the book](../creating_and_modifying_columns/creating_and_modifying_columns.qmd).\n\n  - You can type `?mutate` into your R console to view the help documentation for this function and follow along with the explanation below.\n\n  - We assigned this new data frame the name `demo` using the assignment operator (`<-`). \n\n  - Because we assigned it the name `demo`, our previous data frame named `demo` (i.e., the one that didn't include `edu_f`) no longer exists in our global environment. If we had wanted to keep that data frame in our global environment, we would have needed to assign our new data frame a different name (e.g., `demo_w_factor`). \n\n* The first argument to the `mutate()` function is the `.data` argument. The value passed to the `.data` argument should be a data frame that is currently in our global environment. We passed the data frame `demo` to the `.data` argument using the pipe operator (`|>`), which is why `demo` isn't written inside `mutate`'s parentheses. \n\n* The second argument to the `mutate()` function is the `...` argument. The value passed to the `...` argument should be a name value pair. That means, a variable name, followed by an equal sign, followed by the values to be assigned to that variable name (`name = value`).\n\n  - The name we passed to the `...` argument was `edu_f`. This value tells R what to name the new variable we are creating.\n  \n    + If we had used the name `edu` instead, then the previous values in the `edu` variable would have been replaced with the new values. That is sometimes what you want to happen. However, when it comes to creating factors, we typically keep the numeric version of the variable in our data frame (e.g., `edu`) and _add a new_ factor variable. We just often find that it can be useful to have both versions of the variable hanging around during the analysis process.\n    \n    + We also use the `_f` naming convention in our code. That means that when we create a new factor variable we name it the same thing the original variable was named with the addition of `_f` (for factor) at the end.\n    \n  - In this case, the value that will be assigned to the name `edu_f` will be the values returned by the `factor()` function. This is an example of nesting functions. \n  \n* We used the `factor()` function to create a factor vector. \n\n  - You can type `?factor` into your R console to view the help documentation for this function and follow along with the explanation below.\n  \n  - The first argument to the `factor()` function is the `x` argument. The value passed to the `x` argument should be a vector of data. We passed the `edu` vector to the `x` argument.\n  \n  - The second argument to the `factor()` function is the `levels` argument. This argument tells R the unique values that the new factor variable can take. We used the shorthand `1:4` to tell R that `edu_f` can take the unique values 1, 2, 3, or 4.\n  \n  - The third argument to the `factor()` function is the `labels` argument. The value passed to the `labels` argument should be a character vector of labels (i.e., descriptive text) for each value in the `levels` argument. The order of the labels in the character vector we pass to the `labels` argument should match the order of the values passed to the `levels` argument. For example, the ordering of `levels` and `labels` above tells R that `1` should be labeled with \"Less than high school\", `2` should be labeled with \"High school graduate\", etc.\n  \nWhen we printed the data frame above, the values in `edu_f` _looked_ the same as the character strings displayed in `edu_char`. Notice, however, that the variable type displayed below `edu_char` in the data frame above is `<chr>` for character. Alternatively, the variable type displayed below `edu_f` is `<fctr>`. Although, labels are used to make factors _look_ like character vectors, they are still integer vectors under the hood. For example:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(demo$edu_char)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: NAs introduced by coercion\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA NA NA NA\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(demo$edu_f)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 1 4 2\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nThere are two main reasons that you may want to use factors instead of character vectors at times:\n\n👍 First, R summarizes character vectors alphabetically by default, which may not be the ideal way to order some categorical variables. However, we can explicitly set the order of factor levels. This will be useful to us later when we analyze categorical variables. Here is a glimpse of things to come:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(demo$edu_char)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n     College graduate  High school graduate Less than high school \n                    1                     1                     1 \n         Some college \n                    1 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(demo$edu_f)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nLess than high school  High school graduate          Some college \n                    1                     1                     1 \n     College graduate \n                    1 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n👆**Here's what we did above:**\n\n* You can type `?base::table` into your R console to view the help documentation for this function and follow along with the explanation below.\n\n* We used the `table()` function to get a count of the number of times each unique value of `edu_char` appears in our data frame. In this case, each value appears one time. Notice that the results are returned to us in alphabetical order.\n\n* Next, we used the `table()` function to get a count of the number of times each unique value of `edu_f` appears in our data frame. Again, each value appears one time. Notice, however, that this time the results are returned to us in the order that we passed to the `levels` argument of the `factor()` function above.\n\n👍 Second, creating categorical variables in our data frame as character vectors limits us to inputting only _observed_ values for that variable. However, there are cases when other categories are possible and just didn't apply to anyone in our data. That information may be useful to know. Factors allow us to tell R that other values are possible, even when they are _unobserved_ in our data. For example, let's add a fifth possible category to our education variable -- graduate school.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo <- demo |> \n  mutate(\n    edu_5cat_f = factor(\n      x      = edu,\n      levels = 1:5,\n      labels = c(\n        \"Less than high school\", \"High school graduate\", \"Some college\", \n        \"College graduate\", \"Graduate school\"\n      )\n    )\n  )\n\ndemo\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 6\n  id      age   edu edu_char              edu_f                 edu_5cat_f      \n  <chr> <dbl> <dbl> <chr>                 <fct>                 <fct>           \n1 001      30     3 Some college          Some college          Some college    \n2 002      67     1 Less than high school Less than high school Less than high …\n3 003      52     4 College graduate      College graduate      College graduate\n4 004      56     2 High school graduate  High school graduate  High school gra…\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nNow, let's use the `table()` function once again to count the number of times each unique level of `edu_char` appears in the data frame and the number of times each unique level of `edu_5cat_f` appears in the data frame:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(demo$edu_char)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n     College graduate  High school graduate Less than high school \n                    1                     1                     1 \n         Some college \n                    1 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(demo$edu_5cat_f)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nLess than high school  High school graduate          Some college \n                    1                     1                     1 \n     College graduate       Graduate school \n                    1                     0 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nNotice that R now tells us that the value `Graduate school` was possible but was observed zero times in the data.\n\n### Coerce a character variable\n\nIt is also possible to coerce character vectors to factors. For example, we can coerce `edu_char` to a factor like so:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo <- demo |> \n  mutate(\n    edu_f_from_char = factor(\n      x      = edu_char,\n      levels = c(\n        \"Less than high school\", \"High school graduate\", \"Some college\", \n        \"College graduate\", \"Graduate school\"\n      )\n    )\n  )\n\ndemo\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 7\n  id      age   edu edu_char              edu_f       edu_5cat_f edu_f_from_char\n  <chr> <dbl> <dbl> <chr>                 <fct>       <fct>      <fct>          \n1 001      30     3 Some college          Some colle… Some coll… Some college   \n2 002      67     1 Less than high school Less than … Less than… Less than high…\n3 003      52     4 College graduate      College gr… College g… College gradua…\n4 004      56     2 High school graduate  High schoo… High scho… High school gr…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(demo$edu_f_from_char)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nLess than high school  High school graduate          Some college \n                    1                     1                     1 \n     College graduate       Graduate school \n                    1                     0 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n👆**Here's what we did above:**\n\n* We coerced a character vector (`edu_char`) to a factor using the `factor()` function. \n\n* Because the levels _are_ character strings, there was no need to pass any values to the `labels` argument this time. Keep in mind, though, that the order of the values passed to the `levels` argument matters. It will be the order that the factor levels will be displayed in your analyses.\n\nNow that we know how to use factors, let's return to our discussion of describing categorical variables. \n\n## Height and Weight Data\n\nBelow, we're going to learn to do descriptive analysis in R by experimenting with some simulated data that contains several people's sex, height, and weight. You can follow along with this lesson by copying and pasting the code chunks below in your R session.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the dplyr package. We will need several of dplyr's functions in the \n# code below.\nlibrary(dplyr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simulate some data\nheight_and_weight_20 <- tibble(\n  id = c(\n    \"001\", \"002\", \"003\", \"004\", \"005\", \"006\", \"007\", \"008\", \"009\", \"010\", \"011\", \n    \"012\", \"013\", \"014\", \"015\", \"016\", \"017\", \"018\", \"019\", \"020\"\n  ),\n  sex = c(1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2),\n  sex_f = factor(sex, 1:2, c(\"Male\", \"Female\")),\n  ht_in = c(\n    71, 69, 64, 65, 73, 69, 68, 73, 71, 66, 71, 69, 66, 68, 75, 69, 66, 65, 65, \n    65\n  ),\n  wt_lbs = c(\n    190, 176, 130, 154, 173, 182, 140, 185, 157, 155, 213, 151, 147, 196, 212, \n    190, 194, 176, 176, 102\n  )\n)\n```\n:::\n\n\n\n\n\n\n\n\n### View the data\n\nLet's start our analysis by taking a quick look at our data...\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight_and_weight_20\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 5\n   id      sex sex_f  ht_in wt_lbs\n   <chr> <dbl> <fct>  <dbl>  <dbl>\n 1 001       1 Male      71    190\n 2 002       1 Male      69    176\n 3 003       2 Female    64    130\n 4 004       2 Female    65    154\n 5 005       1 Male      73    173\n 6 006       1 Male      69    182\n 7 007       2 Female    68    140\n 8 008       1 Male      73    185\n 9 009       2 Female    71    157\n10 010       1 Male      66    155\n11 011       1 Male      71    213\n12 012       2 Female    69    151\n13 013       2 Female    66    147\n14 014       2 Female    68    196\n15 015       1 Male      75    212\n16 016       2 Female    69    190\n17 017       2 Female    66    194\n18 018       2 Female    65    176\n19 019       2 Female    65    176\n20 020       2 Female    65    102\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n👆**Here's what we did above:** \n\n* Simulated some data that we can use to practice categorical data analysis.    \n\n* We viewed the data and found that it has 5 variables (columns) and 20 observations (rows).    \n\n* Also notice that you can use the \"Next\" button at the bottom right corner of the printed data frame to view rows 11 through 20 if you are viewing this data in RStudio.  \n\n\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The \"Next\" button in RStudio.](next_button.png)\n:::\n:::\n\n\n\n\n\n\n\n\n## Calculating frequencies\n\nNow that we’re able to easily view our data, let’s return to the original purpose of this demonstration – calculating frequencies and proportions. At this point, we suspect that few of you would have any trouble saying that the frequency of females in this data is 12 and the frequency of males in this data is 8. It's pretty easy to just count the number of females and males in this small data set with only 20 rows. Further, if we asked you what proportion of this sample is female, most of you would still be able to easily say `12/20 = 0.6`, or 60%. But, what if we had 100 observations or 1,000,000 observations? You’d get sick of counting pretty quickly. Fortunately, you don’t have to! Let R do it for you! As is almost always the case with R, there are multiple ways we can calculate the statistics that we're interested in. \n\n### The base R table function\n\nAs we already saw above, we can use the base R `table()` function like this:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(height_and_weight_20$sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n 1  2 \n 8 12 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nAdditionally, we can use the `CrossTable()` function from the `gmodels` package, which gives us a little more information by default.\n\n### The gmodels CrossTable function\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Like all packages, you will have to install gmodels (install.packages(\"gmodels\")) before you can use the CrossTable() function. \ngmodels::CrossTable(height_and_weight_20$sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n \n   Cell Contents\n|-------------------------|\n|                       N |\n|         N / Table Total |\n|-------------------------|\n\n \nTotal Observations in Table:  20 \n\n \n          |         1 |         2 | \n          |-----------|-----------|\n          |         8 |        12 | \n          |     0.400 |     0.600 | \n          |-----------|-----------|\n\n\n\n \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n### The tidyverse way\n\nThe final way we're going to discuss here is the `tidyverse` way, which is our preference. We will have to write a little additional code, but the end result will be more flexible, more readable, and will return our statistics to us in a data frame that we can save and use for further analysis. Let's walk through this step by step...\n\n:::callout-note\nYou should already be familiar with the pipe operator (`|>`), but if it doesn't look familiar to you, you can learn more about it in [Using pipes](../using_pipes/using_pipes.qmd). Don't forget, if you are using RStudio, you can use the keyboard shortcut `shift + command + m` (Mac) or `shift + control + m` (Windows) to insert the pipe operator.\n:::\n\nFirst, we don't want to view the individual values in our data frame. Instead, we want to condense those values into summary statistics. This is a job for the [summarise()](https://dplyr.tidyverse.org/reference/summarise.html) function. \n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight_and_weight_20 |> \n  summarise()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 0\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nAs you can see, `summarise()` doesn't do anything interesting on its own. We need to tell it what kind of summary information we want. We can use the [n()](https://dplyr.tidyverse.org/reference/n.html) function to count rows. By default, it will count all the rows in the data frame. For example:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight_and_weight_20 |> \n  summarise(n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  `n()`\n  <int>\n1    20\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n👆**Here's what we did above:** \n\n* We passed our entire data frame to the `summarise()` function and asked it to count the number of rows in the data frame. \n\n* The result we get is a new data frame with 1 column (named `n()`) and one row with the value 20 (the number of rows in the original data frame).\n\nThis is a great start. However, we really want to count the number of rows that have the value \"Female\" for sex_f, and then separately count the number of rows that have the value \"Male\" for sex_f. Said another way, we want to break our data frame up into smaller data frames -- one for each value of `sex_f` -- and then count the rows. This is exactly what `dplyr`'s [group_by()](https://dplyr.tidyverse.org/reference/group_by.html) function does.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight_and_weight_20 |>\n  group_by(sex_f) |> \n  summarise(n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  sex_f  `n()`\n  <fct>  <int>\n1 Male       8\n2 Female    12\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nAnd, that's what we want.\n\n:::callout-note\n`dplyr`'s `group_by()` function operationalizes the [Split - Apply - Combine](../appendices/glossary.qmd#glossary-split-apply-combine) strategy for data analysis. That sounds sort of fancy, but all it really means is that we split our data frame up into smaller data frames, apply our calculation separately to each smaller data frame, and then combine those individual results back together as a single result. So, in the example above, the `height_and_weight_20` data frame was split into two separate little data frames (i.e., one for females and one for males), then the `summarise()` and `n()` functions counted the number of rows in each of the two smaller data frames (i.e., 12 and 8 respectively), and finally combined those individual results into a single data frame, which was printed to the screen for us to view.\n:::\n\nHowever, it will be awkward to work with a variable named `n()` (i.e., with parentheses) in the future. Let's go ahead and assign it a different name. We can assign it any valid name we want. Some names that might make sense are `n`, `frequency`, or `count`. We're going to go ahead and just name it `n` without the parentheses.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight_and_weight_20 |>\n  group_by(sex_f) |> \n  summarise(n = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  sex_f      n\n  <fct>  <int>\n1 Male       8\n2 Female    12\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n👆**Here's what we did above:** \n\n* We added `n = ` to our summarise function (`summarise(n = n())`) so that our count column in the resulting data frame would be named `n` instead of `n()`.\n\nFinally, estimating categorical frequencies like this is such a common operation that `dplyr` has a shortcut for it -- `count()`. We can use the [count()](https://dplyr.tidyverse.org/reference/tally.html) function to get the same result that we got above.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight_and_weight_20 |> \n  count(sex_f)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  sex_f      n\n  <fct>  <int>\n1 Male       8\n2 Female    12\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n## Calculating percentages\n\nIn addition to frequencies, we will often be interested in calculating percentages for categorical variables. As always, there are many ways to accomplish this task in R. From here on out, we're going to primarily use `tidyverse` functions.\n\nIn this case, the proportion of people in our data who are female can be calculated as the number who are female (12) divided by the total number of people in the data (20). Because we already know that there are 20 people in the data, we could calculate proportions like this:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight_and_weight_20 |>\n  count(sex_f) |> \n  mutate(prop = n / 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  sex_f      n  prop\n  <fct>  <int> <dbl>\n1 Male       8   0.4\n2 Female    12   0.6\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n👆**Here's what we did above:**\n\n* Because the `count()` function returns a data frame just like any other data frame, we can manipulate it in the same ways we can manipulate any other data frame.    \n\n* So, we used `dplyr`'s `mutate()` function to create a new variable in the data frame named `prop`. Again, we could have given it any valid name.   \n\n* Then we set the value of `prop` to be equal to the value of `n` divided by 20.    \n\nThis works, but it would be better to have R calculate the total number of observations for the denominator (20) than for us to manually type it in. In this case, we can do that with the `sum()` function.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight_and_weight_20 |> \n  count(sex_f) |> \n  mutate(prop = n / sum(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  sex_f      n  prop\n  <fct>  <int> <dbl>\n1 Male       8   0.4\n2 Female    12   0.6\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n👆**Here's what we did above:**\n\n* Instead of manually typing in the total count for our denominator (20), we had R calculate it for us using the `sum()` function. The `sum()` function added together all the values of the variable `n` (i.e., 12 + 8 = 20).   \n\nFinally, we just need to multiply our proportion by 100 to convert it to a percentage.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight_and_weight_20 |> \n  count(sex_f) |> \n  mutate(percent = n / sum(n) * 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  sex_f      n percent\n  <fct>  <int>   <dbl>\n1 Male       8      40\n2 Female    12      60\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n👆**Here's what we did above:**\n\n* Changed the name of the variable we are creating from `prop` to `percent`. But, we could have given it any valid name.   \n\n* Multiplied the proportion by 100 to convert it to a percentage.\n\n\n## Missing data {#cat-missing-data}\n\nIn the real world, you will frequently encounter data that has missing values. Let's quickly take a look at an example by adding some missing values to our data frame.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight_and_weight_20 <- height_and_weight_20 |> \n  mutate(sex_f = replace(sex, c(2, 9), NA)) |> \n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 5\n   id      sex sex_f ht_in wt_lbs\n   <chr> <dbl> <dbl> <dbl>  <dbl>\n 1 001       1     1    71    190\n 2 002       1    NA    69    176\n 3 003       2     2    64    130\n 4 004       2     2    65    154\n 5 005       1     1    73    173\n 6 006       1     1    69    182\n 7 007       2     2    68    140\n 8 008       1     1    73    185\n 9 009       2    NA    71    157\n10 010       1     1    66    155\n11 011       1     1    71    213\n12 012       2     2    69    151\n13 013       2     2    66    147\n14 014       2     2    68    196\n15 015       1     1    75    212\n16 016       2     2    69    190\n17 017       2     2    66    194\n18 018       2     2    65    176\n19 019       2     2    65    176\n20 020       2     2    65    102\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n👆**Here's what we did above:**\n\n* Replaced the 2nd and 9th value of `sex_f` with `NA` (missing) using the `replace()` function.   \n\nNow let's see how our code from above handles this\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight_and_weight_20 |> \n  count(sex_f) |> \n  mutate(percent = n / sum(n) * 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  sex_f     n percent\n  <dbl> <int>   <dbl>\n1     1     7      35\n2     2    11      55\n3    NA     2      10\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nAs you can see, we are now treating missing as if it were a category of sex_f. Sometimes this will be the result you want. However, often you will want the n and percent of _non-missing_ values for your categorical variable. This is sometimes referred to as a [complete case analysis](../appendices/glossary.qmd#glossary-complete-case-analysis). There's a couple of different ways we can handle this. We will simply filter out rows with a missing value for sex_f with `dplyr`'s [filter()](https://dplyr.tidyverse.org/reference/filter.html) function.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight_and_weight_20 |> \n  filter(!is.na(sex_f)) |> \n  count(sex_f) |> \n  mutate(percent = n / sum(n) * 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  sex_f     n percent\n  <dbl> <int>   <dbl>\n1     1     7    38.9\n2     2    11    61.1\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n👆**Here's what we did above:**\n\n* We used `filter()` to keep only the rows that have a _non-missing_ value for sex_f.    \n  \n  - In the R language, we use the `is.na()` function to tell the R interpreter to identify NA (missing) values in a vector. We _cannot_ use something like `sex_f == NA` to identify NA values, which is sometimes confusing for people who are coming to R from other statistical languages.    \n  \n  - In the R language, `!` is the NOT operator. It sort of means \"do the opposite.\"   \n  \n  - So, `filter()` tells R which rows of a data frame to _keep_, and `is.na(sex_f)` tells R to find rows with an NA value for the variable `sex_f`. Together, `filter(is.na(sex_f))` would tell R to _keep_ rows with an NA value for the variable `sex_f`. Adding the NOT operator `!` tells R to do the opposite -- _keep_ rows that do _NOT_ have an NA value for the variable `sex_f`.    \n\n* We used our code from above to calculate the n and percent of non-missing values of sex_f.   \n\n## Formatting results {#formatting-results}\n\nNotice that now our percentages are being displayed with 5 digits to the right of the decimal. If we wanted to present our findings somewhere (e.g., a journal article or a report for our employer) we would almost never want to display this many digits. Let's get R to round these numbers for us.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight_and_weight_20 |> \n  filter(!is.na(sex_f)) |> \n  count(sex_f) |> \n  mutate(percent = (n / sum(n) * 100) |> round(2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  sex_f     n percent\n  <dbl> <int>   <dbl>\n1     1     7    38.9\n2     2    11    61.1\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n👆**Here's what we did above:**\n\n* We passed the calculated percentage values `(n / sum(n) * 100)` to the `round()` function to round our percentages to 2 decimal places.    \n  \n  - Notice that we had to wrap `n / sum(n) * 100` in parentheses in order to pass it to the `round()` function with a pipe.    \n  \n  - We could have alternatively written our R code this way: `mutate(percent = round(n / sum(n) * 100, 2))`.   \n  \n## Using freqtables\n\nIn the sections above, we learned how to use `dplyr` functions to calculate the frequency and percentage of observations that take on each value of a categorical variable. However, there can be a fair amount of code writing involved when using those methods. The more we have to repeatedly type code, the more tedious and error-prone it becomes. This is an idea we will return to many times in this book. Luckily, the R programming language allows us to write our own functions, which solves both of those problems.\n\nLater in this book, we will show you [how to write your own functions](../writing_functions/writing_functions.qmd). For the time being, We're going to suggest that you install and use a package we created called [freqtables](https://github.com/brad-cannell/freqtables). The `freqtables` package is basically an enhanced version of the code we wrote in the sections above. We designed it to help us quickly make tables of descriptive statistics (i.e., counts, percentages, confidence intervals) for categorical variables, and it's specifically designed to work in a `dplyr` pipeline.\n\nLike all packages, you need to first install it...\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# You may be asked if you want to update other packages on your computer that\n# freqtables uses. Go ahead and do so.\ninstall.packages(\"freqtables\")\n```\n:::\n\n\n\n\n\n\n\n\nAnd then load it...\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# After installing freqtables on your computer, you can load it just like you\n# would any other package.\nlibrary(freqtables)\n```\n:::\n\n\n\n\n\n\n\n\nNow, let's use the `freq_table()` function from `freqtables` package to rerun our analysis from above.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight_and_weight_20 |>\n  filter(!is.na(sex_f)) |>\n  freq_table(sex_f)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 9\n  var   cat       n n_total percent    se t_crit   lcl   ucl\n  <chr> <chr> <int>   <int>   <dbl> <dbl>  <dbl> <dbl> <dbl>\n1 sex_f 1         7      18    38.9  11.8   2.11  18.2  64.5\n2 sex_f 2        11      18    61.1  11.8   2.11  35.5  81.8\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n👆**Here's what we did above:**\n\n* We used `filter()` to keep only the rows that have a _non-missing_ value for sex and passed the data frame on to the `freq_table()` function using a pipe.\n\n* We told the `freq_table()` function to create a univariate frequency table for the variable `sex_f`. A \"univariate frequency table\" just means a table (data frame) of useful statistics about a single categorical variable.\n\n* The univariate frequency table above includes:\n    \n    - `var`: The name of the categorical variable (column) we are analyzing.\n    \n    - `cat`: Each of the different categories the variable `var` contains -- in this case \"Male\" and \"Female\".\n\n    - `n`: The number of rows where `var` equals the value in `cat`. In this case, there are 7 rows where the value of `sex_f` is Male, and 11 rows where the value of `sex_f` is Female.\n\n  - `n_total`: The sum of all the `n` values. This is also to total number of rows in the data frame currently being analyzed.\n  \n  - `percent`: The percent of rows where `var` equals the value in `cat`.\n  \n  - `se`: The standard error of the percent. This value is not terribly useful on its own; however, it's necessary for calculating the 95% confidence intervals.\n  \n  - `t_crit`: The critical value from the t distribution. This value is not terribly useful on its own; however, it's necessary for calculating the 95% confidence intervals.\n  \n  - `lcl`: The lower (95%, by default) confidence limit for the percentage `percent`.\n  \n  - `ucl`: The upper (95%, by default) confidence limit for the percentage `percent`.\n  \nWe will continue using the `freqtables` package at various points throughout the book. We will also show you some other cool things we can do with `freqtables`. For now, all you need to know how to do is use the `freq_table()` function to calculate frequencies and percentages for single categorical variables.\n\n🏆 Congratulations! You now know how to use R to do some basic descriptive analysis of individual categorical variables. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}