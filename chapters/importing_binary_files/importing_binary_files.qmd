# Importing Binary Files

<!-- 
Hidden comments placeholder
---------------------------

File path for importing files interactively (testing):
"/Users/bradcannell/Dropbox/R4Epi Textbook/r4epi/data/file_name.ext"

File path for importing files when building the book:
"file_name.ext"

To preview:
bookdown::preview_chapter("chapters/importing_binary_files/importing_binary_files.qmd")

Copy and paste:
ðŸ‘†**Here's what we did above:**
-->

In the last chapter we learned that there are many different file types that one can use to store data. We also learned how to use the `readr` package to import several different variations of **plain text files** into R. 

In this chapter, we will focus on data stored in **binary files**. Again, you can think of binary files as being more complex than plain text files and accessing the information in binary files requires the use of special software. Some examples of binary files that we have frequently seen used in epidemiology include Microsoft Excel spreadsheets, SAS data sets, and Stata data sets. Below, we will learn how to import all three file types into R.

```{r}
#| label: files
#| echo: FALSE
knitr::include_graphics("files.png")
```

## Packages for importing data

Technically, base R does not contain any functions that can be used to import the binary file types discussed above. However, the `foreign` package contains functions that may be used to import SAS data sets and Stata data sets, and is installed by default when you install R on your computer. Having said that, we aren't going to use the `foreign` package in this chapter. Instead, we're going to use the following packages to import data in the examples below. If you haven't done so already, we suggest that you go ahead and install these packages now. 

* [readxl](https://readxl.tidyverse.org/). We will use the `readxl` package to import Microsoft Excel files.

* [haven](https://haven.tidyverse.org/). We will use the `haven` package to import SAS and Stata data sets.

```{r}
library(readxl)
library(haven)
```

## Importing Microsoft Excel spreadsheets

We probably sent data in Microsoft Excel files more than any other file format. Fortunately, the `readxl` package makes it really easy to import Excel spreadsheets into R. And, because that package is maintained by the same people who create the `readr` package that you have already seen, we think it's likely that the `readxl` package will feel somewhat familiar right from the start.

We would be surprised if any of you had never seen an Excel spreadsheet before -- they are pretty ubiquitous in the modern world -- but we'll go ahead and show a screenshot of our height and weight data in Excel for the sake of completeness.

```{r}
#| label: excel
#| echo: FALSE
knitr::include_graphics("excel.png")
```

All we have to do to import this spreadsheet into R as a data frame is passing the path to the excel file to the `path` argument of the `read_excel()` function. 

[You may click here to download this file to your computer.](https://github.com/brad-cannell/r4epi/blob/master/data/excel.xlsx)

```{r}
#| cache: TRUE
excel <- read_excel("excel.xlsx")
```

```{r}
excel
```


ðŸ‘†**Here's what we did above:**

* We used `readxl`'s `read_excel()` function to import a Microsoft Excel spreadsheet. That spreadsheet was imported as a data frame and we assigned that data frame to the R object called `excel`.

::: callout-warning
Make sure to always include the file extension in your file paths. For example, using "/excel" instead of "/excel.xlsx" above (i.e., no .xlsx) would have resulted in an error telling you that the filed does not exist.
:::

Fortunately for us, just passing the Excel file to the `read_excel()` function like this will usually "just work." But, let's go ahead and simulate another situation that is slightly more complex. Once again, we've received data from a team that is using Microsoft Excel to capture some study data. 

```{r}
#| lable: excel_complex
#| echo: FALSE
knitr::include_graphics("excel_complex.png")
```

As you can see, this data looks very similar to the csv file we previously imported. However, it looks like the study team has done a little more formatting this time. Additionally, they've added a couple of columns we haven't seen before -- date of birth and annual household income. 

As a final little wrinkle, the data for this study is actually the second sheet in this Excel file (also called a workbook). The study team used the first sheet in the workbook as a data dictionary that looks like this:

```{r}
#| label: data_dictionary
#| echo: FALSE
knitr::include_graphics("data_dictionary.png")
```

Once again, we will have to deal with some of the formatting that was done in Excel before we can analyze our data in R.

[You may click here to download this file to your computer.](https://github.com/brad-cannell/r4epi/blob/master/data/excel_complex.xlsx)

We'll start by taking a look at the result we get when we try to pass this file to the `read_excel()` function without changing any of `read_excel()`'s default values.

```{r}
#| cache: TRUE
excel <- read_excel("excel_complex.xlsx")
```

```{r}
excel
```

And, as we're sure you saw coming, this isn't the result we wanted. However, we can get the result we wanted by making a few tweaks to the default values of the `sheet`, `col_names`, `col_types`, `skip`, and `na` arguments of the `read_excel()` function.

```{r}
#| cache: TRUE
excel <- read_excel(
  path = "excel_complex.xlsx",
  sheet = "Study Phase 1",
  col_names = c("id", "sex", "ht_in", "wgt_lbs", "dob", "income"),
  col_types = c(
    "text",
    "text",
    "numeric",
    "numeric",
    "date",
    "numeric",
    "skip"
  ),
  skip = 3,
  na = c("", "NA", "Missing")
)
```

```{r}
excel
```


As we said, the `readr` package and `readxl` package were developed by the same people. So, the code above looks similar to the code we used to import the csv file in the previous chapter. Therefore, we're not going to walk through this code step-by-step. Rather, we're just going to highlight some of the slight differences.

* You can type `?read_excel` into your R console to view the help documentation for this function and follow along with the explanation below.

* The first argument to the `read_excel()` function is the `path` argument. It serves the same purpose as the `file` argument to `read_csv()` -- it just has a different name.

* The `sheet` argument to the `read_excel()` function tells R which sheet of the Excel workbook contains the data you want to import. In this case, the study team named that sheet "Study Phase 1". We could have also passed the value `2` to the `sheet` argument because "Study Phase 1" is the second sheet in the workbook. However, we suggest using the sheet name. That way, if the study team sends you a new Excel file next week with different ordering, you are less likely to accidentally import the wrong data.

* The value we pass to the `col_types` argument is now a vector of character strings instead of a list of functions nested in the `col()` function. 

  - The values that the col_types function will accept are `"skip"` for telling R to ignore a column in the spreadsheet, `"guess"` for telling R to guess the variable type, `"logical"` for logical (TRUE/FALSE) variables, "`numeric`" for numeric variables, `"date"` for date variables, `"text"` for character variables, and `"list"` for everything else. 
  
  - Notice that we told R to import income as a numeric variable. This caused the commas and dollar signs to be dropped. We did this because keeping the commas and dollar signs would have required us to make income a character variable (numeric variables can only include numbers). If we had imported income as a character variable, we would have lost the ability to perform mathematical operations on it. Remember, it makes no sense to "add" two words together. Later, we will show you how to add dollar signs and commas back to the numeric values if you want to display them in your final results.
  
* We used the `col_names`, `skip`, and `na` arguments in exactly the same way we used them in the read_csv function.

You should be able to import most of the data stored in Excel spreadsheets with just the few options that we discussed above. However, there may be times were importing spreadsheets is even more complicated. If you find yourself in that position, we suggest that you first check out [the readxl website here](https://readxl.tidyverse.org/index.html).

## Importing data from other statistical analysis software

Many applications designed for statistical analysis allow you to save data in a binary format. One reason for this is that binary data formats allow you to save **metadata** alongside your data values. Metadata is data _about_ the data. Using our running example, the data is about the heights, weights, and other characteristics of our study participants. **Metadata** about this data might include information like when this data set was created, or value labels that make the data easier to read (e.g., the dollar signs in the income variable).

In our experience, you are slightly more likely to have problems importing binary files saved from other statistical analysis applications than plain text files. Perhaps because they are more complex, the data just seems to become corrupt and do other weird things more often than is the case with plain text files. However, in our experience, it is also the case that when we are able to import binary files created in other statistical analysis applications, doing so requires less adjusting of default values. In fact, we will usually only need to pass the file path to the correct `read_` function.

Below, we will see some examples of importing binary files saved in two popular statistical analysis applications -- SAS and Stata. We will use the `haven` package to import both.

## Importing SAS data sets

SAS actually allows users to save data in more than one type of binary format. Data can be saved as SAS data sets or as SAS Transport files. SAS data set file names end with the .sas7bdat file extension. SAS Transport file file names end with the .xpt file extension. 

In order to import a SAS data set, we typically only need to pass the correct file path to `haven`'s `read_sas()` function. 

[You may click here to download this file to your computer.](https://github.com/brad-cannell/r4epi/blob/master/data/height_and_weight.sas7bdat)

```{r}
#| cache: TRUE
sas <- read_sas("height_and_weight.sas7bdat")
```

```{r}
sas
```

ðŸ‘†**Here's what we did above:**

* We used `haven`'s `read_sas()` function to import a SAS data set. That data was imported as a data frame and we assigned that data frame to the R object called `sas`.

In addition to SAS data sets, data that has been altered in SAS can also be saved as a SAS transport file. Some of the national, population-based public health surveys (e.g., BRFSS and NHANES) make their data publicly available in this format.

You can download the [2018 BRFSS data as a SAS Transport file here](https://www.cdc.gov/brfss/annual_data/annual_2018.html). About halfway down the webpage, there is a link that says, "2018 BRFSS Data (SAS Transport Format)". 

```{r}
#| lable: download_brfss
#| echo: FALSE
knitr::include_graphics("download_brfss.png")
```

Clicking that link should download the data to your computer. Notice that the SAS Transport file is actually stored _inside_ a zip file. You can unzip the file first if you would like, but you don't even have to do that. Amazingly, you can pass the path to the zipped .xpt file directly to the `read_xpt()` function like so:

```{r}
#| cache: TRUE
brfss_2018 <- read_xpt("LLCP2018XPT.zip")
```

```{r}
head(brfss_2018)
```

ðŸ‘†**Here's what we did above:**

* We used `haven`'s `read_xpt()` function to import a zipped SAS Transport File. That data was imported as a data frame and we assigned that data frame to the R object called `brfss_2018`.

* Because this is a large data frame (437,436 observations and 275 variables), we used the `head()` function to print only the first 6 rows of the data to the screen. 

But, this demonstration actually gets even cooler. Instead of downloading the SAS Transport file to our computer before importing it, we can actually sometimes import files, including SAS Transport files, directly from the internet.

For example, you can download the [2017-2018 NHANES demographic data as a SAS Transport file here](https://wwwn.cdc.gov/nchs/nhanes/search/datapage.aspx?Component=Demographics&CycleBeginYear=2017)

```{r}
#| lable: nhanes_link
#| echo: FALSE
knitr::include_graphics("nhanes_link.png")
```

If you right-click on the link that says, "DEMO_J Data [XPT - 3.3 MB]", you will see an option to copy the link address. 

```{r}
#| lable: copy_link_address
#| echo: FALSE
knitr::include_graphics("copy_link_address.png")
```

Click "Copy Link Address" and then navigate back to RStudio. Now, all you have to do is paste that link address where you would normally type a file path into the `read_xpt()` function. When you run the code chunk, the `read_xpt()` function will import the NHANES data directly from the internet (assuming you are connected to the internet). ðŸ˜²

```{r}
#| cache: TRUE
nhanes_demo <- read_xpt("https://wwwn.cdc.gov/Nchs/Data/Nhanes/Public/2017/DataFiles/DEMO_J.xpt")
```

```{r}
head(nhanes_demo)
```

ðŸ‘†**Here's what we did above:**

* We used `haven`'s `read_xpt()` function to import a SAS Transport File directly from the NHANES website. That data was imported as a data frame and we assigned that data frame to the R object called `nhanes_demo`.

* Because this is a large data frame (9,254 observations and 46 variables), we used the `head()` function to print only the first 6 rows of the data to the screen. 

## Importing Stata data sets

Finally, we will import a Stata data set (.dta) to round out our discussion of importing data from other statistical analysis software packages. There isn't much of anything new here -- you could probably have even guessed how to do this without us showing you.

[You may click here to download this file to your computer.](https://github.com/brad-cannell/r4epi/blob/master/data/height_and_weight.dta)

```{r}
#| cache: TRUE
stata <- read_stata("height_and_weight.dta")
```

```{r}
stata
```

ðŸ‘†**Here's what we did above:**

* We used `haven`'s `read_stata()` function to import a Stata data set. That data was imported as a data frame and we assigned that data frame to the R object called `stata`.

You now know how to write code that will allow you to import data stored in all of the file formats that we will use in this book, and the vast majority of formats that you are likely to encounter in your real-world projects. In the next section, We will introduce you to a tool in RStudio that makes importing data even easier. 
